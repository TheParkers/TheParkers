# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  # The python orb contains a set of prepackaged CircleCI configuration you can use repeatedly in your configuration files
  # Orb commands and jobs help you with common scripting around a language/tool
  # so you dont have to copy and paste it everywhere.
  # See the orb documentation here: https://circleci.com/developer/orbs/orb/circleci/python
  python: circleci/python@1.2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build-and-test: # This is the name of the job, feel free to change it to better match what you're trying to do!
    # These next lines defines a Docker executors: https://circleci.com/docs/2.0/executor-types/
    # You can specify an image from Dockerhub or use one of the convenience images from CircleCI's Developer Hub
    # A list of available CircleCI Docker convenience images are available here: https://circleci.com/developer/images/image/cimg/python
    # The executor is the environment in which the steps below will be executed - below will use a python 3.8 container
    # Change the version below to your required version of python
    docker:
      - image: cimg/python:3.8
    # Checkout the code as the first step. This is a dedicated CircleCI step.
    # The python orb's install-packages step will install the dependencies from a Pipfile via Pipenv by default.
    # Here we're making sure we use just use the system-wide pip. By default it uses the project root's requirements.txt.
    # Then run your tests!
    # CircleCI will report the results back to your VCS provider.
    steps:
      - checkout
      # - python/install-packages:
      #     pkg-manager: pip
          # app-dir: ~/project/package-directory/  # If you're requirements.txt isn't in the root directory.
          # pip-dependency-file: test-requirements.txt  # if you have a different name for your requirements file, maybe one that combines your runtime and test requirements.
      - run:
          name: Run tests
          # This assumes pytest is installed via the install-package step above
          command: echo Running Job

  build-and-test-my-branch:
    docker:
    - image: cimg/python:3.8
    - image: cimg/mysql:8.0.27
      environment:
        MYSQL_ALLOW_EMPTY_PASSWORD: true
        MYSQL_ROOT_PASSWORD: ''
        MYSQL_HOST: 127.0.0.1
        DB_HOST: 127.0.0.1
    steps:
      - checkout
      - run:
          name: Wait for MYSQL server.
          command: |
              for i in `seq 1 10`;
              do
                nc -z 127.0.0.1 3306 && echo Success && exit 0
                echo -n .
                sleep 1
              done
              echo Failed waiting for MySQL && exit 1
      - run:
          name: update APT list
          command: sudo apt-get update -y
      - run:
          name: Install mysql
          command: echo "Installing packages..." && sudo apt install mysql-client-8.0 -y
      - python/install-packages:
          pip-dependency-file: .circleci/requirements.txt
          pkg-manager: pip
      - run:
          name: Install npm and tools
          command: sudo apt install npm && sudo npm install -g firebase-tools
      - run:
          name: version check
          command: echo "Django version:" $(django-admin --version) && echo "MySQL version:" $(mysql --version) &&
            echo "npm version:" $(npm --version) && echo "node version:" $(node --version)
      - run:
          name: test mysql connection
          command: |
            mysql -h 127.0.0.1 -u root --execute="CREATE USER 'testuser'@'%' IDENTIFIED BY 'testpass';"
            mysql -h 127.0.0.1 -u root --execute="GRANT ALL PRIVILEGES ON *.* TO 'testuser'@'%';"
            mysql -h 127.0.0.1 -u root --execute="FLUSH PRIVILEGES;"
            mysql -h 127.0.0.1 -u root --execute="CREATE DATABASE test_db;"
            mysql -h 127.0.0.1 -u root --execute="SHOW DATABASES;"

# Invoke jobs via workflows 
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build-and-test:
          filters:
            branches:
              only:
              - develop

      - build-and-test-my-branch:
          filters:
            branches:
              only:
              - Navjot