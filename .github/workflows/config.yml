# This is a basic workflow to help you get started with Actions

name: CI/CD

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  pull_request:
    branches: [ 'develop' ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  jobid: ${GITHUB_JOB}
  workspace: ${GITHUB_WORKSPACE}
  branch: ${GITHUB_REF##*/}
  chrome: ${{ secrets.CHROME_BIN }}
  chromepath: ${{ secrets.CHROME_PATH }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  PRFormat:
    runs-on: ubuntu-latest
    steps:
      - name: check PR title format 
        uses: thehanimo/pr-title-checker@v1.3.4
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          pass_on_octokit_error: false
          configuration_path: ".github/workflows/pr-title-checker-config.json"
  
  LabelChanges:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - uses: actions/labeler@v2
      with:
        repo-token: "${{ secrets.GITHUB_TOKEN }}"
          
  backendbuild:
    # The type of runner that the job will run on
    needs: PRFormat
    runs-on: ubuntu-latest
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout code
        uses: actions/checkout@v2

      - name: setup Python
        uses: actions/setup-python@v2

      - name: install python dependencies
        run: python3 -m pip install --upgrade pip && pip install -r backend/requirements.txt
      
      - name: check django sanity
        run: |
            cd backend
            python3 manage.py check
            python3 manage.py makemigrations
            python manage.py migrate
  
      - name: run unit tests 
        run: |
            cd backend
            coverage run  --omit=*/venv/*,*/migrations/*,*/test/* --source='apps' manage.py test --noinput
            coverage report --fail-under=90
            coverage html

      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDS }}'

      - name: 'set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      
      - name: push coverage files to GCP cloud
        run: gsutil -m cp -r ${{ env.workspace }}/backend/htmlcov/ gs://theparkers-coverage/backend/

  frontendbuild:
    needs: PRFormat
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
      
      - name: setup Node.js environment
        uses: actions/setup-node@v2.5.1
      
      - name: install npm packages
        run: cd frontend && npm install

      - name: run unit tests
        run: cd frontend && npm run testdev 
      
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDS }}'

      - name: 'set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v0'
      
      - name: push coverage files to GCP cloud
        run: gsutil -m cp -r ${{ env.workspace }}/frontend/coverage/ gs://theparkers-coverage/coverage/

      
      
  
  Deployment:
    needs: [frontendbuild, backendbuild]
    runs-on: ubuntu-latest
    steps:
      - name: checkout code
        uses: actions/checkout@v2
        
      - id: 'auth'
        uses: 'google-github-actions/auth@v0'
        with:
          credentials_json: '${{ secrets.GCP_CREDS }}'
          
      - name: login to GCR
        uses: docker/login-action@v1
        with:
          registry: ${{ secrets.GCR}}
          username: _json_key
          password: ${{ secrets.GCP_CREDS }}
        
      - name: generating frontend image name 
        run: echo "DOCKERFRONTENDIMAGE=theparkersdev-frontend-${{ env.branch }}-${{ env.jobid }}" >> $GITHUB_ENV
      
      - name: generating backend image name 
        run: echo "DOCKERBACKENDIMAGE=theparkersdev-backend-${{ env.branch }}-${{ env.jobid }}" >> $GITHUB_ENV
      
      - name: Adding gcp registry secret to env (for docker compose access)
        run:  echo "GCP_REGISTRY=${{secrets.GCP_REGISTRY}}" >> $GITHUB_ENV
        
      - name: Build docker image
        run: docker-compose -f docker-compose.yml build
      
      - name: Push docker Frontend Image to GCR (Google cloud registry)
        run: docker push ${{ secrets.GCP_REGISTRY }}:${{ env.DOCKERFRONTENDIMAGE }}
      
      - name: Push docker Backend Image to GCR (Google cloud registry)
        run: docker push ${{ secrets.GCP_REGISTRY }}:${{ env.DOCKERBACKENDIMAGE }}
      
      - name: Deploy Backend app
        id: deploy-api-service
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          image: ${{ secrets.GCP_REGISTRY }}:${{ env.DOCKERBACKENDIMAGE }}
          service: ${{ secrets.GCP_CLOUDRUN_BACKEND_SERVICENAME }}
          region: ${{ secrets.DEV_CLOUDRUN_REGION }}
      
      - name: Deploy Frontend app
        id: deploy-app-service
        uses: google-github-actions/deploy-cloudrun@v0
        with:
          image: ${{ secrets.GCP_REGISTRY }}:${{ env.DOCKERFRONTENDIMAGE }}
          service: ${{ secrets.GCP_CLOUDRUN_FRONTEND_SERVICENAME }}
          region: ${{ secrets.DEV_CLOUDRUN_REGION }}
      

          
