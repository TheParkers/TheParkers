# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the develop branch
  push:
    branches: [ develop, Samarth ]
  pull_request:
    branches: [ develop, Samarth ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  backendbuild:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD: ''
          MYSQL_HOST: 127.0.0.1
          DB_HOST: 127.0.0.1
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: checkout code
        uses: actions/checkout@v2

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.5.1

      - name: Setup Python
        uses: actions/setup-python@v2.3.1
 
      - name: Start MySQL server.
        run: sudo systemctl start mysql.service

      - name: Wait for MYSQL server.
        run: |
          for i in `seq 1 20`;
          do
            nc -z 127.0.0.1 3306 && echo Success && exit 0
            echo -n .
            sleep 1
          done
          echo Failed waiting for MySQL && exit 1
      
      - name: update APT list
        run: sudo apt-get update -y

      - name: Install npm and tools
        run: sudo npm install -g firebase-tools

      - name: install python dependencies
        run: python -m pip install --upgrade pip && pip install -r .github/workflows/requirements.txt
      
      - name: run django server
        run: |
            cd django_project
            python manage.py check
            python manage.py test

      - name: Run Tests
        run: python -m unittest

      - name: version check
        run: echo "Django version:" $(django-admin --version) && echo "MySQL version:" $(mysql --version) &&
            echo "npm version:" $(npm --version) && echo "node version:" $(node --version)
